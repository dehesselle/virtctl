#!/bin/bash
################################################
#                                              #
#   vmmctl - Virtual Machine Monitor Control   #
#                                              #
#   https://github.com/dehesselle/vmmctl       #
#                                              #
#                                              #
################################################
#
# This is a helper script to easily start/stop virtual machines based on
# libvirt, using 'virsh'. Some basic settings can be configured via
# a config file ('CONFIG').
#
# It's designed to be used from a systemd service; specifically, the
# 'shutdown' function is implemented as a synchronous process, waiting
# for the VM to shut down gracefully. This is to avoid systemd killing
# the VM ('ExecStop' is supposed to be blocking), risking data loss or
# even corruption of the VM.
# There is a safeguard in place, called 'GRACEFUL_SHUTDOWN_TIMEOUT', to
# avoid deadlocking if things don't work as expected. If that timeout
# is exceeded, we will no longer block and systemd will most likely
# kill the VM.
# (This is for completeness sake; systemd has its own timeouts as well.)
#

CONFIG=/usr/local/etc/vmmctl.conf

if [ -f $CONFIG ]; then
   . $CONFIG
else
   echo "missing file: $CONFIG"
   exit 1
fi

shopt -s expand_aliases

alias log='_log "$FUNCNAME"'

function _log
{
   local func_name=$1

   if [ ${#func_name} -eq 0 ]; then
      func_name=main
   fi

   echo "$(date "+%Y%m%d-%H%M%S") $func_name: ${*:2}" >> $LOGFILE
}

function create
{
   local vm_name=$1
   local vm_domain=$DOMAIN_ROOT_DIR/$vm_name/$vm_name.xml

   $VIRSH create $vm_domain
}

function is_running
{
   local vm_name=$1

   if [ $($VIRSH list | grep "running" | grep "$vm_name" | wc -l) -eq 1 ]; then
      echo true
   else
      echo false
   fi
}

function get_ip
{
   local vm_name=$1
   local dynamic=$2

#  dynamic: determine IP from dynamic DHCP leases; works only while lease is
#           still active
#  static:  determine IP from static DHCP leases; works only if a static lease
#           has been defined
   if [ ${#dynamic} -eq 0 ]; then
     local vm_ip=$($VIRSH net-dumpxml $VIRTUAL_NETWORK | grep "$vm_name")
     if [[ "$vm_ip" =~ ip=\'([^\']+)\' ]]; then
        vm_ip=${BASH_REMATCH[1]}
     fi
   else
     local vm_ip=$($VIRSH net-dhcp-leases $VIRTUAL_NETWORK | grep "$vm_name" | awk '{ print $5 }')
     vm_ip=${vm_ip%/*}   # remove mask (usually "/24")
   fi

   echo $vm_ip
}

function is_up
{
   local vm_name=$1
   local vm_up=false

   if $(is_running $vm_name); then
      ping -c 1 $(get_ip $vm_name) 1>/dev/null 2>&1
      local ping_rc=$?
      if [ $ping_rc -eq 0 ]; then
         vm_up=true
      fi
   else
      log "$vm_name not running"
   fi

   echo $vm_up
}

function shutdown
{
   local vm_name=$1
   local seconds=0
   local keep_waiting=true

   while $keep_waiting; do
      if $(is_running $vm_name); then
         if   [ $seconds -eq 0 ]; then   # first iteration: initiate shutdown
            log "[$vm_name] requesting shutdown"
            $VIRSH shutdown $vm_name
         elif [ $((seconds%20)) -eq 0 ]; then   # request shutdown every 20 sec
#           for VMs that need more "persuasion" to shutdown
#           (I'm looking at you, Windows!)
            log "$seconds seconds passed, requesting shutdown again"
            $VIRSH shutdown $vm_name
         elif [ $seconds -ge $GRACEFUL_SHUTDOWN_TIMEOUT ]; then   # give up
            log "$seconds seconds passed, giving up"
            keep_waiting=false
         fi
         sleep 1
      else
         if [ $seconds -eq 0 ]; then
            log "[$vm_name] was already down"
         else
            log "[$vm_name] is now down"
         fi
         keep_waiting=false
      fi

      ((seconds++))
   done
}

function shutdown_all
{
   log "begin sequence"

   for vm_name in $($VIRSH list | grep "running" | awk '{ print $2 }'); do
      shutdown $vm_name &
   done

   while [ $($VIRSH list | grep "running" | wc -l) -gt 0 ]; do
      log "waiting for VMs to shutdown"
      sleep 5
   done

   log "end sequence"
}

function start
{
   create $*
}

function stop
{
   shutdown $*
}

function status
{
   for vm_name in $($VIRSH list | grep "running" | awk '{ print $2 }'); do
      log "[$vm_name] is running"
   done
}

function exec_post
{
   local vm_name=$1
   local action=$2
   local exec=$DOMAIN_ROOT_DIR/$vm_name/${action}_post

   [ -f $exec ] && $exec
}

function start_post
{
   local vm_name=$1
   exec_post $vm_name start
}

function stop_post
{
   local vm_name=$1
   exec_post $vm_name stop
}

log "$0 $*"
$*
