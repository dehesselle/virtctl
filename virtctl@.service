################################################################################
#                                                                              #
#   Service: virtctl                                                           #
#                                                                              #
#   https://github.com/dehesselle/virtctl                                      #
#                                                                              #
################################################################################
#
# This is an instantiable service to start and stop virtual machines
# using virsh.
#
[Unit]
Description=Virtual Machine %i
Requires=libvirt-guests.service
After=libvirt-guests.service

[Service]
Type=forking
# DOMAIN_DIR is set to libvirt's default directory that contains all XML files.
# This allows virtctl to seemlessly integrate with a default setup.
# If you prefer another file layout - e.g. all configuration and
# image files in one place per domain, like in previous versions of virtctl -
# override this setting in a drop-in (see file_layout.conf.example)
Environment=DOMAIN_DIR=/etc/libvirt/qemu
# FUNCTIONS points to the file that contains virtctl's convenience functions
# (e.g. 'forward_port' for ExecStartPost actions). It get's sourced into the
# environment of ExecStartPost, ExecStopPre (i.e. the first ExecStop) and
# and ExecStopPost, if the file is actually available. (This service is
# supposed to work without it, although at the expense of some functionality.)
Environment=FUNCTIONS=/etc/virtctl.d/functions.sh
# DOMAIN is the domain name (instance name) that you're controlling with this
# service. The FUNCTIONS above expect this variable to be set.
Environment=DOMAIN=%i
# The service needs to know where the pid file is.
PIDFile=/run/libvirt/qemu/%i.pid
# Check if libvirtd is responsive by connecting to it. This is not allowed to
# fail.
ExecStartPre=/usr/bin/bash -c 'COUNT=0; while [ $COUNT -le 10 ]; do ((COUNT++)); virsh connect 2>/dev/null; [ $? -eq 0 ] && exit 0 || sleep 1; done; exit 1'
# Create the domain.
ExecStart=/usr/bin/virsh create ${DOMAIN_DIR}/%i.xml
# Provide a (optional) post-start functionality. Allowed to fail.
ExecStartPost=-/usr/bin/timeout -k 10 50 bash -c '[ -f ${FUNCTIONS} ] && source ${FUNCTIONS} ExecStartPost || :'
# This first ExecStop acts as substitute for the non-existing "ExecStopPre".
# It is required because we have post-stop actions that actually need to run
# while the domain is still running. Allowed to fail.
ExecStop=-/usr/bin/timeout -k 10 50 bash -c '[ -f ${FUNCTIONS} ] && source ${FUNCTIONS} ExecStopPre; [ "$(type -t virtctl_stoppre)" = "function" ] && virtctl_stoppre || :'
# Shutdown the domain gracefully by sending ACPI shutdown event.
ExecStop=/usr/bin/bash -c 'export LANG=C; COUNT=0; while [ $COUNT -le 60 ]; do STATE=$(virsh domstate %i 2>&1); if [ "$STATE" = "running" ]; then [ $(($COUNT % 15)) -eq 0 ] && virsh shutdown %i; ((COUNT++)); elif [ "$STATE" = "shut off" ] || [ "${STATE::27}" = "error: failed to get domain" ]; then exit 0; fi; sleep 1; done; exit 1'
# Provide a (optional) post-stop functionality per domain. Not allowed to fail
# because it doesn't make a difference at this point.
ExecStopPost=/usr/bin/bash -c '[ -f ${FUNCTIONS} ] && source ${FUNCTIONS} ExecStopPost || :'
# Set higher timeouts to allow for Exec commands to take longer.
TimeoutStartSec=90
TimeoutStopSec=180

[Install]
WantedBy=hypervisor.target

